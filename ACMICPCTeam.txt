HACKER RANK - ACM ICPC Team

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'acmTeam' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts STRING_ARRAY topic as parameter.
     */

    public static List<Integer> acmTeam(List<String> topic) {
    int maxCount=0,i=0,j=0,k=0,count=0,pair=1,premax=0;
    for(i=0;i<topic.size();i++)
    {

        for(j=i+1;j<topic.size();j++)
        {
            for(k=0;k<topic.get(i).length();k++)
            {
                if(topic.get(i).charAt(k)!='0'||topic.get(j).charAt(k)!='0')
                {
                    count++;
                }
                if(maxCount<count)
                {
                    maxCount=count;
                    pair=1;
                }
                else if(maxCount==count)
                {
                    pair++;
                }
                 }
                count=0;
                
          }
            
         if(i==0||premax<maxCount)
          {
                premax=maxCount;
                
          }
          
          System.out.println(premax);
          System.out.println(pair);
          
              
    }
    List<Integer> result=new ArrayList();
    result.add(premax);
    result.add(pair);
    
    return result;

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int m = Integer.parseInt(firstMultipleInput[1]);

        List<String> topic = IntStream.range(0, n).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .collect(toList());

        List<Integer> result = Result.acmTeam(topic);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
